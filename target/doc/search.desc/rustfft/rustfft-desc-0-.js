searchState.loadedDescShard("rustfft", 0, "RustFFT is a high-performance FFT library written in pure …\nA trait that allows FFT algorithms to report whether they …\nTrait for algorithms that compute FFTs.\nRepresents a FFT direction, IE a forward FFT or an inverse …\nGeneric floating point number, implemented for f32 and f64\nThe FFT planner creates new FFT algorithm instances.\nThe AVX FFT planner creates new FFT algorithm instances …\nThe Neon FFT planner creates new FFT algorithm instances …\nThe Scalar FFT planner creates new FFT algorithm instances …\nThe SSE FFT planner creates new FFT algorithm instances …\nThe WASM FFT planner creates new FFT algorithm instances …\nA trait that allows FFT algorithms to report their …\nIndividual FFT algorithms\nReturns FftDirection::Forward if this instance computes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the size of the scratch buffer required by …\nReturns the size of the scratch buffer required by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe FFT size that this algorithm can process\nCreates a new <code>FftPlanner</code> instance.\nCreates a new <code>FftPlannerScalar</code> instance.\nConstructs a new <code>FftPlannerAvx</code> instance.\nCreates a new <code>FftPlannerSse</code> instance.\nCreates a new <code>FftPlannerNeon</code> instance.\nCreates a new <code>FftPlannerWasmSimd</code> instance.\nReturns the opposite direction of <code>self</code>.\nReturns a <code>Fft</code> instance which computes FFTs of size <code>len</code>.\nReturns a <code>Fft</code> instance which computes FFTs of size <code>len</code>.\nReturns a <code>Fft</code> instance which uses AVX instructions to …\nReturns a <code>Fft</code> instance which uses SSE4.1 instructions to …\nReturns a <code>Fft</code> instance which uses Neon instructions to …\nReturns a <code>Fft</code> instance which uses WebAssembly SIMD …\nReturns a <code>Fft</code> instance which computes forward FFTs of size …\nReturns a <code>Fft</code> instance which computes forward FFTs of size …\nReturns a <code>Fft</code> instance which uses AVX instructions to …\nReturns a <code>Fft</code> instance which uses SSE4.1 instructions to …\nReturns a <code>Fft</code> instance which uses Neon instructions to …\nReturns a <code>Fft</code> instance which uses WebAssembly SIMD …\nReturns a <code>Fft</code> instance which computes inverse FFTs of size …\nReturns a <code>Fft</code> instance which computes inverse FFTs of size …\nReturns a <code>Fft</code> instance which uses AVX instructions to …\nReturns a <code>Fft</code> instance which uses SSE4.1 instructions to …\nReturns a <code>Fft</code> instance which uses Neon instructions to …\nReturns a <code>Fft</code> instance which uses WebAssembly SIMD …\nComputes a FFT in-place.\nDivides <code>input</code> and <code>output</code> into chunks of size <code>self.len()</code>, …\nDivides <code>buffer</code> into chunks of size <code>self.len()</code>, and …\nImplementation of Bluestein’s Algorithm\nNaive O(n^2 ) Discrete Fourier Transform implementation\nImplementation of the Good-Thomas Algorithm (AKA Prime …\nImplementation of the Good-Thomas Algorithm, specialized …\nImplementation of the Mixed-Radix FFT algorithm\nImplementation of the Mixed-Radix FFT algorithm, …\nImplementation of Rader’s Algorithm\nFFT algorithm optimized for power-of-three sizes\nFFT algorithm optimized for power-of-two sizes\nHardcoded size-specfic FFT algorithms\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a FFT instance which will process inputs/outputs …\nPreallocates necessary arrays and precomputes necessary …\nCreates a FFT instance which will process inputs/outputs …\nCreates a FFT instance which will process inputs/outputs …\nCreates a FFT instance which will process inputs/outputs …\nCreates a FFT instance which will process inputs/outputs …\nCreates a FFT instance which will process inputs/outputs …\nPreallocates necessary arrays and precomputes necessary …\nPreallocates necessary arrays and precomputes necessary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")