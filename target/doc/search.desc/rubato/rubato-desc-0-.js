searchState.loadedDescShard("rubato", 0, "An audio sample rate conversion library for Rust.\nBlackman. Intermediate rolloff and intermediate …\nSquared Blackman. Slower rolloff but better attenuation …\nBlackman-Harris. Slow rolloff but good attenuation.\nSquared Blackman-Harris. Slower rolloff but better …\nAn identifier for a cpu feature.\nCubic polynomial, fitted using 4 sample points.\nFor cubic interpolation, the four nearest intermediate …\nContains the error value\nAn asynchronous resampler that accepts a fixed number of …\nAn asynchronous resampler that returns a fixed number of …\nA synchronous resampler that needs a fixed number of audio …\nA synchronous resampler that accepts a fixed number of …\nA synchronous resampler that needs a varying number of …\nHann. Fast rolloff but not very high attenuation.\nSquared Hann. Slower rolloff and higher attenuation than …\nError raised when the number of frames in an input channel …\nError raised when the number of frames in an output …\nLinear polynomial, fitted using 2 sample points.\nFor linear interpolation, the new sample value is …\nError raised when trying to use a CPU feature which is not …\nNearest, uses the nearest sample point without any fitting.\nThe Nearest mode doesn’t do any interpolation, but …\naarc64 neon cpu feature.\nContains the success value\nDegree of the polynomial used for interpolation. A higher …\nFor quadratic interpolation, the three nearest …\nQuintic polynomial, fitted using 6 sample points.\nError raised when Resampler::set_resample_ratio is called …\nThe error type used by <code>rubato</code>.\nA result alias for the error type used by <code>rubato</code>.\nA resampler that is used to resample a chunk of audio to a …\nThe error type returned when constructing Resampler.\nThe trait governing a single sample.\nSeptic polynomial, fitted using 8 sample points.\nAn asynchronous resampler that accepts a fixed number of …\nAn asynchronous resampler that returns a fixed number of …\nA struct holding the parameters for sinc interpolation.\nInterpolation methods that can be selected. For …\nError raised when calling Resampler::set_resample_ratio on …\nThis is an wrapper trait implemented via the …\nDifferent window functions that can be used to window the …\nError raised when the number of channels in the input …\nError raised when the number of channels in the mask doesn…\nError raised when the number of channels in the output …\nConvenience method for getting the current allocated …\nConvenience method for getting the current length of a …\nCalculate a suitable relative cutoff frequency for the …\nCoerce <code>value</code> into the current type.\nCalculate the cosine of <code>self</code>.\nRelative cutoff frequency of the sinc interpolation filter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA macro for implementing wrapper traits for when a …\nRefer to Resampler::input_buffer_allocate.\nConvenience method for allocating an input buffer suitable …\nGet the maximum number of input frames per channel the …\nRefer to Resampler::input_frames_max.\nGet the number of frames per channel needed for the next …\nRefer to Resampler::input_frames_next.\nInterpolation type, see <code>SincInterpolationType</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for allocating a buffer to hold a given …\nGet the maximum number of channels this Resampler is …\nRefer to Resampler::nbr_channels.\nRefer to Resampler::output_buffer_allocate.\nConvenience method for allocating an output buffer …\nGet the delay for the resampler, reported as a number of …\nRefer to Resampler::output_delay.\nGet the max number of output frames per channel.\nRefer to Resampler::output_frames_max.\nGet the number of frames per channel that will be output …\nRefer to Resampler::output_frames_next.\nThe number of intermediate points to use for interpolation.\nRefer to Resampler::process.\nThis is a convenience wrapper for process_into_buffer that …\nResample a buffer of audio to a pre-allocated output …\nRefer to Resampler::process_into_buffer.\nRefer to Resampler::process_partial.\nThis is a convenience method for processing the last …\nRefer to Resampler::process_partial_into_buffer.\nThis is a convenience method for processing the last …\nReset the resampler state and clear all internal buffers.\nConvenience method for resizing a buffer to a new number …\nUpdate the resample ratio.\nRefer to Resampler::set_resample_ratio.\nUpdate the resample ratio. This is not supported by this …\nUpdate the resample ratio. This is not supported by this …\nUpdate the resample ratio. This is not supported by this …\nUpdate the resample ratio as a factor relative to the …\nRefer to Resampler::set_resample_ratio_relative.\nUpdate the resample ratio relative to the original one. …\nUpdate the resample ratio relative to the original one. …\nUpdate the resample ratio relative to the original one. …\nCalculate the sine of <code>self</code>.\nLength of the windowed sinc interpolation filter. Higher …\nHelper to make a mask where all channels are marked as …\nWindow function to use.\nCubic polynomial, fitted using 4 sample points.\nAn asynchronous resampler that accepts a fixed number of …\nAn asynchronous resampler that returns a fixed number of …\nLinear polynomial, fitted using 2 sample points.\nNearest, uses the nearest sample point without any fitting.\nDegree of the polynomial used for interpolation. A higher …\nQuintic polynomial, fitted using 6 sample points.\nSeptic polynomial, fitted using 8 sample points.\nPerform cubic polynomial interpolation to get value at x. …\nLinear interpolation between two points at x=0 and x=1.\nPerform quintic polynomial interpolation to get value at x.\nPerform septic polynomial interpolation to get value at x. …\nCreate a new FastFixedIn.\nCreate a new FastFixedOut.\nFor cubic interpolation, the four nearest intermediate …\nFor linear interpolation, the new sample value is …\nThe Nearest mode doesn’t do any interpolation, but …\nFor quadratic interpolation, the three nearest …\nAn asynchronous resampler that accepts a fixed number of …\nAn asynchronous resampler that returns a fixed number of …\nA struct holding the parameters for sinc interpolation.\nInterpolation methods that can be selected. For …\nRelative cutoff frequency of the sinc interpolation filter …\nPerform cubic polynomial interpolation to get value at x. …\nPerform linear interpolation between two points at x=0 and …\nPerform quadratic polynomial interpolation to get value at …\nInterpolation type, see <code>SincInterpolationType</code>\nCreate a new SincFixedIn.\nCreate a new SincFixedOut.\nCreate a new SincFixedIn using an existing Interpolator.\nCreate a new SincFixedOut using an existing Interpolator.\nThe number of intermediate points to use for interpolation.\nLength of the windowed sinc interpolation filter. Higher …\nWindow function to use.\nAn identifier for a cpu feature.\nContains the error value\nError raised when the number of frames in an input channel …\nError raised when the number of frames in an output …\nError raised when trying to use a CPU feature which is not …\naarc64 neon cpu feature.\nContains the success value\nError raised when Resampler::set_resample_ratio is called …\nThe error type used by <code>rubato</code>.\nA result alias for the error type used by <code>rubato</code>.\nThe error type returned when constructing Resampler.\nError raised when calling Resampler::set_resample_ratio on …\nError raised when the number of channels in the input …\nError raised when the number of channels in the mask doesn…\nError raised when the number of channels in the output …\nTest if the given CPU feature is detected.\nGet the nearest time point for time t in format (index, …\nGet the two nearest time points for time t in format …\nGet the three nearest time points for time t in format …\nGet the four nearest time points for time t in format …\nThe trait used to coerce a value infallibly from one type …\nThe trait governing a single sample.\nCoerce <code>value</code> into the current type.\nPerform a coercion from <code>value</code> into the current type.\nCalculate the cosine of <code>self</code>.\nCalculate the sine of <code>self</code>.\nHelper function. Make a set of windowed sincs.\nHelper function: sinc(x) = sin(pi<em>x)/(pi</em>x).\nA plain scalar interpolator.\nFunctions for making the scalar product with a sinc.\nReturns the argument unchanged.\nMake the scalar product between the waveform starting at …\nCalculate the scalar produt of an input wave and the …\nHelper macro to define a dummy implementation of the …\nCalls <code>U::from(self)</code>.\nCheck if sincs are empty.\nGet sinc length.\nGet number of sincs used for oversampling.\nCreate a new ScalarInterpolator.\nDummy trait when not supported.\nCollection of cpu features required for this interpolator.\nA SSE accelerated interpolator.\nTrait governing what can be done with an NeonSample.\nReturns the argument unchanged.\nCalculate the scalar produt of an input wave and the …\nInterpolate a sinc sample.\nCalls <code>U::from(self)</code>.\nCreate a new NeonInterpolator.\nPack sincs into a vector.\nDummy trait when not supported.\nA synchronous resampler that needs a fixed number of audio …\nA synchronous resampler that accepts a fixed number of …\nA synchronous resampler that needs a varying number of …\nA helper for resampling a single chunk of data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new FftFixedIn.\nCreate a new FftFixedOut.\nCreate a new FftFixedInOut.\nResample a small chunk.\nBlackman. Intermediate rolloff and intermediate …\nSquared Blackman. Slower rolloff but better attenuation …\nBlackman-Harris. Slow rolloff but good attenuation.\nSquared Blackman-Harris. Slower rolloff but better …\nHann. Fast rolloff but not very high attenuation.\nSquared Hann. Slower rolloff and higher attenuation than …\nDifferent window functions that can be used to window the …\nHelper function. Standard Blackman window.\nHelper function. Standard Blackman-Harris window.\nCalculate a suitable relative cutoff frequency for the …\nHelper function. Standard Hann window.\nMake the selected window function.")